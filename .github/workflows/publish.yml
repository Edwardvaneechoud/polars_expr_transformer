name: Publish Python Package

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest tests/test.py

    - name: Publish package
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        CURRENT_VERSION=$(poetry version -s)
        echo "Current version is $CURRENT_VERSION"
        PUBLISHED=$(curl -s https://pypi.org/pypi/polars_expr_transformer/$CURRENT_VERSION/json | jq -r '.info.version')
        if [ "$PUBLISHED" == "$CURRENT_VERSION" ]; then
          echo "Version $CURRENT_VERSION already exists on PyPI. Bumping patch version..."
          poetry version patch
          NEW_VERSION=$(poetry version -s)
          echo "New version is $NEW_VERSION"
          # Update version until a non-existing version is found
          while [ "$(curl -s https://pypi.org/pypi/polars_expr_transformer/$NEW_VERSION/json | jq -r '.info.version')" == "$NEW_VERSION" ]; do
            poetry version patch
            NEW_VERSION=$(poetry version -s)
            echo "Trying new version $NEW_VERSION"
          done
        else
          echo "Version $CURRENT_VERSION does not exist on PyPI. Using current version..."
          NEW_VERSION=$CURRENT_VERSION
        fi
        # Publish to PyPI
        poetry publish --build --username __token__ --password $PYPI_TOKEN
        # Configure Git for pushing changes
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git
        # Add and commit changes
        git add pyproject.toml poetry.lock
        git commit -m "Bump version to $NEW_VERSION"
        git tag $NEW_VERSION
        git push --follow-tags
