name: CI/CD

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  ensure_up_to_date:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Print GitHub Actor
        run: |
          GITHUB_ACTOR=${{ github.actor }}
          echo "GitHub Actor: $GITHUB_ACTOR"
          GITHUB_REF=${{ github.ref }}
          echo "Github ref: $GITHUB_REF"
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          echo "$COMMIT_MESSAGE"
          EVENT_TYPE="${{ github.event.type }}"
          TRIGGER_ACTOR="${{ github.triggering_actor }}"
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          echo "AUTHOR NAME PRETTY= $AUTHOR_NAME"


      - name: Print Push Event Data
        if: github.event_name == 'push'
        run: |
          echo "Push Event Data:"
          echo "github.event.ref: ${{ github.event.ref }}"
          echo "github.event.before: ${{ github.event.before }}"
          echo "github.event.after: ${{ github.event.after }}"
          echo "github.event.head_commit.message: ${{ github.event.head_commit.message }}"
          echo "github.event.head_commit.timestamp: ${{ github.event.head_commit.timestamp }}"
          echo "github.event.head_commit.author.name: ${{ github.event.head_commit.author.name }}"
          echo "github.event.head_commit.author.email: ${{ github.event.head_commit.author.email }}"
          echo "github.event.head_commit.committer.name: ${{ github.event.head_commit.committer.name }}"
          echo "github.event.head_commit.committer.email: ${{ github.event.head_commit.committer.email }}"
          echo "github.event.commits: ${{ toJson(github.event.commits) }}"

      - name: Print Pull Request Event Data
        if: github.event_name == 'pull_request'
        run: |
          echo "Pull Request Event Data:"
          echo "github.event.action: ${{ github.event.action }}"
          echo "github.event.number: ${{ github.event.number }}"
          echo "github.event.pull_request.title: ${{ github.event.pull_request.title }}"
          echo "github.event.pull_request.body: ${{ github.event.pull_request.body }}"
          echo "github.event.pull_request.head.ref: ${{ github.event.pull_request.head.ref }}"
          echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"
          echo "github.event.pull_request.user.login: ${{ github.event.pull_request.user.login }}"

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Fetch all branches
        run: git fetch --all

      - name: Merge develop into feature branch
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            BASE_BRANCH=$(jq -r .pull_request.base.ref $GITHUB_EVENT_PATH)
            HEAD_BRANCH=$(jq -r .pull_request.head.ref $GITHUB_EVENT_PATH)
            if [[ "$BASE_BRANCH" == "develop" ]]; then
              git checkout $HEAD_BRANCH
              git merge origin/develop
              if [ $? -ne 0 ]; then
                echo "Merge conflict detected. Please resolve conflicts before merging."
                exit 1
              fi
              git push origin $HEAD_BRANCH
            else
              echo "No need to merge develop into the feature branch."
            fi
          else
            echo "Not a develop branch, skipping merge step."
          fi

  build_and_test:
    runs-on: ubuntu-latest
    if: always  ()
    needs: ensure_up_to_date

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest tests/test.py

  bump_version_and_publish:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Check if version exists on PyPI and bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -e
          echo "Checking current version with Poetry..."
          CURRENT_VERSION=$(poetry version -s)
          echo "Current version: $CURRENT_VERSION"
  
          echo "Checking if version $CURRENT_VERSION exists on PyPI..."
          PUBLISHED=$(curl -s https://pypi.org/pypi/polars_expr_transformer/$CURRENT_VERSION/json | jq -r '.info.version')
          
          if [ "$PUBLISHED" == "$CURRENT_VERSION" ]; then
            echo "Version $CURRENT_VERSION already exists on PyPI. Bumping patch version..."
            poetry version patch
            NEW_VERSION=$(poetry version -s)
            echo "New version is $NEW_VERSION"
            echo "Configuring Git for pushing changes..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
    
            echo "Adding and committing changes..."
            git add pyproject.toml poetry.lock
            git commit -m "Bump version to $NEW_VERSION"
            git tag $NEW_VERSION
            git push --follow-tags

          else
            echo "Version $CURRENT_VERSION does not exist on PyPI. Using current version..."
            NEW_VERSION=$CURRENT_VERSION
          fi

      - name: Publish version to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -e
          NEW_VERSION=$(poetry version -s)
          echo "Publishing version $NEW_VERSION to PyPI..."
          poetry publish --build --username __token__ --password $PYPI_TOKEN
