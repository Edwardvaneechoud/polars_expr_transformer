name: CI/CD

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  verify_run:
    runs-on: ubuntu-latest
    outputs:
      run_rest_jobs: ${{ steps.set_output.outputs.run_jobs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: set output if run
        id: set_output
        run: |
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          COMMIT_REFS_PARSED=$(git log -1 --pretty=format:'%d')
          echo "Author Name: $AUTHOR_NAME"
          echo "Commit refs parsed: $COMMIT_REFS_PARSED"
          
          if [[ "$AUTHOR_NAME" == "github-actions[bot]" ]]; then
            echo "run_jobs=false" >> $GITHUB_OUTPUT
            echo "Ending rest of job"
          else
            echo "run_jobs=true" >> $GITHUB_OUTPUT
            echo "Running rest of job"
          fi

  ensure_up_to_date:
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' || github.event_name == 'push')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check Author and Refs
        id: check_author
        run: |
          AUTHOR_NAME=$(git log -1 --pretty=format:'%an')
          COMMIT_REFS=$(git log -1 --pretty=format:'%d')
          echo "Author Name: $AUTHOR_NAME"
          echo "Commit Refs: $COMMIT_REFS"

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Merge develop into feature branch
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            BASE_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH" || echo "")
            HEAD_BRANCH=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH" || echo "")
            if [[ "$BASE_BRANCH" == "develop" && -n "$HEAD_BRANCH" ]]; then
              git checkout $HEAD_BRANCH
              git merge origin/develop || {
                echo "Merge conflict detected. Please resolve conflicts before merging."
                exit 1
              }
              git push origin $HEAD_BRANCH
            else
              echo "No need to merge develop into the feature branch."
            fi
          else
            echo "Not a develop branch, skipping merge step."
          fi

  build_and_test:
    runs-on: ubuntu-latest
    needs: ensure_up_to_date
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Configure Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run tests
        run: poetry run pytest tests

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            .pytest_cache/
            test-reports/
          retention-days: 7

  bump_version_and_publish:
    needs: [build_and_test, verify_run]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.verify_run.outputs.run_rest_jobs == 'true'

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --without dev --no-interaction

      - name: Check if version exists on PyPI and bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -e
          echo "Checking current version with Poetry..."
          CURRENT_VERSION=$(poetry version -s)
          echo "Current version: $CURRENT_VERSION"
  
          echo "Checking if version $CURRENT_VERSION exists on PyPI..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/pypi/polars_expr_transformer/$CURRENT_VERSION/json)
          
          if [ "$HTTP_STATUS" == "200" ]; then
            echo "Version $CURRENT_VERSION already exists on PyPI. Bumping patch version..."
            poetry version patch
            NEW_VERSION=$(poetry version -s)
            echo "New version is $NEW_VERSION"
            echo "Configuring Git for pushing changes..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
    
            echo "Adding and committing changes..."
            git add pyproject.toml poetry.lock
            git commit -m "Bump version to $NEW_VERSION"
            git tag $NEW_VERSION
            git push --follow-tags

          else
            echo "Version $CURRENT_VERSION does not exist on PyPI. Using current version..."
            NEW_VERSION=$CURRENT_VERSION
          fi

      - name: Build and publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -e
          NEW_VERSION=$(poetry version -s)
          echo "Publishing version $NEW_VERSION to PyPI..."
          poetry build
          poetry publish --username __token__ --password $PYPI_TOKENte