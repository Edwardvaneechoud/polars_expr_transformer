name: CI/CD

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main

jobs:
  check_branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Verify source branch
        run: |
          BASE_BRANCH=$(jq -r .pull_request.base.ref $GITHUB_EVENT_PATH)
          HEAD_BRANCH=$(jq -r .pull_request.head.ref $GITHUB_EVENT_PATH)
          if [[ "$BASE_BRANCH" == "main" && ("$HEAD_BRANCH" != "develop" && "$HEAD_BRANCH" != "main") ]]; then
            echo "Pull requests to main are only allowed from develop or main branches. Exiting."
            exit 1
          else
            echo "Source branch verified: $HEAD_BRANCH -> $BASE_BRANCH"
          fi

  build:
    runs-on: ubuntu-latest
    needs: check_branch
    if: github.ref != 'refs/heads/main' || github.event.before != github.event.after

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  bump_version:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'github-actions[bot]' && github.event.before != github.event.after

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Check if version exists on PyPI and bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(poetry version -s)
          PACKAGE_NAME=$(poetry version --name)
          RESPONSE=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/$CURRENT_VERSION/json)
          if [ "$RESPONSE" == "Not Found" ]; then
            echo "Version $CURRENT_VERSION does not exist on PyPI. Proceeding with the version bump."
          else
            echo "Version $CURRENT_VERSION already exists on PyPI. Exiting."
            exit 1
          fi

          # Bump the version
          poetry version patch
          NEW_VERSION=$(poetry version -s)

          # Commit the version bump
          git add pyproject.toml poetry.lock
          git commit -m "Bump version to $NEW_VERSION"

          # Push changes to main
          git push --follow-tags

  publish:
    needs: bump_version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'github-actions[bot]' && github.event.before != github.event.after

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --build --username __token__ --password $POETRY_PYPI_TOKEN
