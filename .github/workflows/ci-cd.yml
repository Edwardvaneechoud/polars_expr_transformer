name: CI/CD

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  ensure_up_to_date:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'develop'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all

      - name: Merge develop into feature branch
        run: |
          BASE_BRANCH=$(jq -r .pull_request.base.ref $GITHUB_EVENT_PATH)
          HEAD_BRANCH=$(jq -r .pull_request.head.ref $GITHUB_EVENT_PATH)
          git checkout $HEAD_BRANCH
          git merge origin/$BASE_BRANCH
          if [ $? -ne 0 ]; then
            echo "Merge conflict detected. Please resolve conflicts before merging."
            exit 1
          fi
          git push origin $HEAD_BRANCH

  build:
    runs-on: ubuntu-latest
    needs: ensure_up_to_date
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest tests/test.py

  bump_version:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Check if version exists on PyPI and bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_VERSION=$(poetry version -s)
          PACKAGE_NAME=$(poetry version --name)
          RESPONSE=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/$CURRENT_VERSION/json)
          if [ "$RESPONSE" == "Not Found" ]; then
            echo "Version $CURRENT_VERSION does not exist on PyPI. Proceeding with the version bump."
          else
            echo "Version $CURRENT_VERSION already exists on PyPI. Exiting."
            exit 1
          fi

          # Bump the version
          poetry version patch
          NEW_VERSION=$(poetry version -s)

          # Commit the version bump
          git add pyproject.toml poetry.lock
          git commit -m "Bump version to $NEW_VERSION"

          # Push changes to main
          git push --follow-tags

  publish:
    needs: bump_version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && github.actor != 'github-actions[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: poetry install --no-dev

      - name: Publish to PyPI
        env:
          POETRY_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --build --username __token__ --password $POETRY_PYPI_TOKEN
